name: Deploy HBP to Amazon ECS

on:
  push:
    branches:
      - master

env:
  ECR_REPOSITORY: "hasura-backend-plus"
  ECS_SERVICE: "HBP-Dev-Service"
  ECS_CLUSTER: "HBP-Dev"
  ECS_TASK_DEFINITION_FAMILY: "HBP-Dev-TD"
  ECS_TASK_DEFINITION_PATH: "task-definition.json"
  CONTAINER_NAME: "HBP-Container"
  sec: "Il0Op6boKSKLEDpNUFHboR573jYUQiwMp6wSJwEd/fE7Las42avAohIp8oHxEOuJTz6XX0NNlXFnFtQfbRCgSoT6zzIk9kLcMNOzQSwvJpnK0QHRGL0hRQQ1R+wr4Q/ZkWGaR1AQLvr0PHnSGxaRQyKOd6b9FOwC8KvIbRcQOIgUHRxAqc/syS/hVYtzMNAEVCdFzrgt8JK8j6zHyIjRCJW+KxJJ6hbBXm8H/A=="

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Debug
        id: debug
        run: |
          echo ${{ secrets.JWT_KEY }} > .env.prod
          echo "${{ secrets.JWT_KEY }}" > .env.prod
          echo '${{ secrets.JWT_KEY }}' > .env.prod

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/prod/Dockerfile .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION_PATH }}

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION_PATH }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true

